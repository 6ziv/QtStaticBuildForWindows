name: static-qt-for-windows
on: 
  workflow_call:
    inputs:
      zlib-version:
        description: 'zlib Version (default to 1.2.11)'
        required: false
        default: '1.2.11'
        type: string
      openssl-version:
        description: 'OpenSSL Version (default to 1_1_1l)'
        required: false
        default: '1_1_1l'
        type: string
      qt-version:
        description: 'Qt Version'
        required: true
        type: string
      arch:
        required: true
        type: string
jobs:
  print-versions:
    runs-on: ubuntu-20.04
    defaults:
      run:
        shell: pwsh
    steps: 
      - run: echo "zlib version = ${{ inputs.zlib-version }}"
      - run: echo "openssl version = ${{ inputs.openssl-version }}"
      - run: echo "qt version = ${{ inputs.qt-version }}"
      - run: echo "arch = x86"
        if: ${{ inputs.arch == 'x86' }}
      - run: echo "arch = x64"
        if: ${{ inputs.arch == 'x64' }}
      - run: echo "Unknown arch"
        if: ${{ inputs.arch != 'x86' && inputs.zlib-version != 'x64' }}
      - run: exit 1
        if: ${{ inputs.arch != 'x86' && inputs.zlib-version != 'x64' }}
  build-zlib:
    runs-on: windows-2022
    needs: print-versions
    steps:
      - uses: jwlawson/actions-setup-cmake@v1.9
        with:
          cmake-version: '3.22.x'
      - run: aria2c -j8 -o "zlib-v${{ inputs.zlib-version }}.tar.gz" "https://github.com/madler/zlib/archive/refs/tags/v${{ inputs.zlib-version }}.tar.gz"
      - run: cmake -E tar xvf zlib-v${{ inputs.zlib-version }}.tar.gz
      - uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: x86
          spectre: true
        if: ${{ inputs.arch == 'x86' }}
      - uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: x64
          spectre: true
        if: ${{ inputs.arch == 'x64' }}
      - run: nmake -f win32/Makefile.msc CFLAGS="/MT /W3 /O2" LDFLAGS="/NOLOGO" ARFLAGS="/NOLOGO /LTCG"
        working-directory: .\zlib-${{ inputs.zlib-version }}
      - run: New-Item ${{ runner.temp }}\zlib\include -ItemType Directory
      - run: New-Item ${{ runner.temp }}\zlib\lib -ItemType Directory
      - run: Copy-Item .\zlib.lib -Destination "${{ runner.temp }}\zlib\lib"
        working-directory: .\zlib-${{ inputs.zlib-version }}
      - run: Copy-Item .\zlib.h,.\zconf.h -Destination "${{ runner.temp }}\zlib\include"
        working-directory: .\zlib-${{ inputs.zlib-version }}
      - uses: DamianReeves/write-file-action@v1.0
        with:
          path: ${{ runner.temp }}\zlib\zlib.pc
          contents: |
            prefix=${pcfiledir}
            exec_prefix=${prefix}
            libdir=${prefix}/lib
            sharedlibdir=${prefix}/lib
            includedir=${prefix}/include
            
            Name: zlib
            Description: zlib compression library
            Version: 1.2.11
            
            Requires:
            Libs: -L"${libdir}" -L"${sharedlibdir}" -lzlib
            Cflags: -I"${includedir}"
            
          write-mode: overwrite
      - uses: actions/upload-artifact@v2
        with:
          name: zlib-${{ inputs.arch }}
          path: ${{ runner.temp }}\zlib
          retention-days: 1
  build-openssl:
    needs: build-zlib
    runs-on: windows-2022
    steps:
      - uses: actions/download-artifact@v2
        with: 
          name: zlib
          path: ${{ runner.temp }}\zlib
      - uses: jwlawson/actions-setup-cmake@v1.9
        with:
          cmake-version: '3.22.x'
      - run: aria2c -j8 -o "strawberry-perl-5.32.1.1-64bit-portable.zip" "https://strawberryperl.com/download/5.32.1.1/strawberry-perl-5.32.1.1-64bit-portable.zip"
      - run: 7z x "strawberry-perl-5.32.1.1-64bit-portable.zip" perl -r
      - run: echo "$env:GITHUB_WORKSPACE\perl\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
      - uses: ilammy/setup-nasm@v1
      - run: aria2c -j8 -o "OpenSSL_${{ inputs.openssl-version }}.tar.gz" "https://github.com/openssl/openssl/archive/refs/tags/OpenSSL_${{ inputs.openssl-version }}.tar.gz"
      - run: cmake -E tar xvf OpenSSL_${{ inputs.openssl-version }}.tar.gz
      - run: New-Item .\openssl-OpenSSL_${{ inputs.openssl-version }}\build -ItemType Directory
      - uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: x86
          spectre: true
        if: ${{ inputs.arch == 'x86' }}
      - uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: x64
          spectre: true
        if: ${{ inputs.arch == 'x64' }}
      - run: perl ../Configure --prefix=${{ runner.temp }}/openssl --openssldir=${{ runner.temp }}/openssl --release --with-zlib-include="${{ runner.temp }}/zlib/include" --with-zlib-lib="${{ runner.temp }}/zlib/lib/zlib.lib" no-shared zlib "ARFLAGS=/NOLOGO /LTCG" "CFLAGS=/MT /W3 /O2" "CXXFLAGS=/MT /W3 /O2" VC-WIN32
        working-directory: .\openssl-OpenSSL_${{ inputs.openssl-version }}\build
        if: ${{ inputs.arch == 'x86' }}
      - run: perl ../Configure --prefix=${{ runner.temp }}/openssl --openssldir=${{ runner.temp }}/openssl --release --with-zlib-include="${{ runner.temp }}/zlib/include" --with-zlib-lib="${{ runner.temp }}/zlib/lib/zlib.lib" no-shared zlib "ARFLAGS=/NOLOGO /LTCG" "CFLAGS=/MT /W3 /O2" "CXXFLAGS=/MT /W3 /O2" VC-WIN64A
        working-directory: .\openssl-OpenSSL_${{ inputs.openssl-version }}\build
        if: ${{ inputs.arch == 'x64' }}
      - run: nmake
        working-directory: .\openssl-OpenSSL_${{ inputs.openssl-version }}\build
      - run: nmake install
        working-directory: .\openssl-OpenSSL_${{ inputs.openssl-version }}\build
      - run: lib /OUT:${{ runner.temp }}\openssl\lib\libssl.lib ${{ runner.temp }}\openssl\lib\libssl.lib ${{ runner.temp }}\zlib\lib\zlib.lib
      - uses: actions/upload-artifact@v2
        with:
          name: openssl-${{ inputs.arch }}
          path: ${{ runner.temp }}\openssl
          retention-days: 1
  build-qt:
    needs: build-openssl
    runs-on: windows-2022
    steps: 
      - uses: jwlawson/actions-setup-cmake@v1.9
        with:
          cmake-version: '3.22.x'
      - run: aria2c -j8 -o "strawberry-perl-5.32.1.1-64bit-portable.zip" "https://strawberryperl.com/download/5.32.1.1/strawberry-perl-5.32.1.1-64bit-portable.zip"
      - run: 7z x "strawberry-perl-5.32.1.1-64bit-portable.zip" perl -r
      - run: echo "$env:GITHUB_WORKSPACE\perl\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
      - uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: x86
          spectre: true
        if: ${{ inputs.arch == 'x86' }}
      - uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: x64
          spectre: true
        if: ${{ inputs.arch == 'x64' }}
      - uses: actions/download-artifact@v2
        with: 
          name: zlib
          path: ${{ runner.temp }}\zlib
      - uses: actions/download-artifact@v2
        with: 
          name: openssl
          path: ${{ runner.temp }}\openssl
      - run: aria2c -j8 -o "qt-everywhere-src-${{ inputs.qt-version }}.tar.xz.meta" "https://download.qt.io/official_releases/qt/6.2/6.2.1/single/qt-everywhere-src-${{ inputs.qt-version }}.tar.xz"
      - run: cmake -E tar xvf qt-everywhere-src-${{ inputs.qt-version }}.tar.xz
      - run: New-Item .\qt-everywhere-src-${{ inputs.qt-version }}\build -ItemType Directory
      - run: ..\configure --prefix=${{ runner.temp }}/Qt -static -static-runtime -release -qt-doubleconversion -DQT_FEATURE_qt3d_qt_assimp=ON -DQT_FEATURE_qtquick3d_qt_assimp=ON -qt-tiff -qt-webp -qt-sqlite -qt-libpng -qt-libjpeg -qt-freetype -qt-harfbuzz -qt-pcre -qt-zlib -openssl -openssl-linked -ltcg -no-pch -no-dbus -I${{ runner.temp }}/openssl/include -L${{ runner.temp }}/openssl/lib -I${{ runner.temp }}/zlib/include -L${{ runner.temp }}/zlib/lib -- -DOPENSSL_USE_STATIC_LIBS=ON -DCMAKE_PREFIX_PATH="${{ runner.temp }}/zlib;${{ runner.temp }}/OpenSSL"
        working-directory: .\qt-everywhere-src-${{ inputs.qt-version }}\build
      - run: cmake --build . --parallel
        working-directory: .\qt-everywhere-src-${{ inputs.qt-version }}\build
      - run: cmake --install .
        working-directory: .\qt-everywhere-src-${{ inputs.qt-version }}\build
      - uses: actions/upload-artifact@v2
        with:
          name: qt-${{ inputs.arch }}
          path: ${{ runner.temp }}\qt
          retention-days: 1
      - if: always()
        uses: actions/upload-artifact@v2
        with:
          name: CMakeOutput.log
          path: D:/a/try_actions/try_actions/qt-everywhere-src-6.2.1/build/CMakeFiles/CMakeOutput.log
          retention-days: 1
      - if: always()
        uses: actions/upload-artifact@v2
        with:
          name: CMakeError.log
          path: D:/a/try_actions/try_actions/qt-everywhere-src-6.2.1/build/CMakeFiles/CMakeError.log
          retention-days: 1